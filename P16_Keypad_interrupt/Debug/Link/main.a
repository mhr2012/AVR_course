;
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;
;flash char shift[4] = {0xFE,0xFD,0xFB,0xF7};
;flash char layout[16] = {  '7' , '8' , '9' , '/',
;                '4' , '5' , '6' , '*',
;                '1' , '2' , '3' , '-',
;                'c' , '0' , '=' , '+'
;            };
;
;flash char array[4][4] = {
;                        {'7' , '8' , '9' , '/'},
;                        {'4' , '5' , '6' , '*'},
;                        {'1' , '2' , '3' , '-'},
;                        {'c' , '0' , '=' , '+'}
;                    };
;
;
;char keypad(void);
;
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001A     char c;
; 0000 001B 
; 0000 001C     c = keypad();
;PCODE: $0000000F VOL: 0
;	c -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001D     lcd_putchar(c);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001E     PORTD = 0xF0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001F 
; 0000 0020 
; 0000 0021 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;
;
;
;void main(void)
; 0000 0027 {
;PCODE: $0000001A VOL: 0
; 0000 0028 lcd_init(16);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0029 
; 0000 002A DDRD = 0x0F;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002B PORTD = 0xF0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002C GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002E MCUCSR=(0<<ISC2);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002F GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0030 
; 0000 0031 
; 0000 0032 #asm("sei")
;PCODE: $0000002A VOL: 0
	sei
;PCODE: $0000002B VOL: 0
; 0000 0033 while (1)
;PCODE: $0000002C VOL: 0
; 0000 0034     {
; 0000 0035 
; 0000 0036     }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0037 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;
;char keypad(void){
; 0000 0039 char keypad(void){
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003A     int row = 0;
; 0000 003B     int colum = -1;
; 0000 003C     //int position = 0;
; 0000 003D         for(row = 0;row<4;row++){
;PCODE: $00000034 VOL: 0
;	row -> R16,R17
;	colum -> R18,R19
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003E             PORTD = shift[row]; // PORTD.4 = 1,PORTD.5 = 1,PORTD.6 = 1 , PORTD.7 = 1 , PORTD.0 = 0 , PORTD.1 = 1
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003F             if(PIND.4 == 0){colum = 0;}
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0040             if(PIND.5 == 0){colum = 1;}
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0041             if(PIND.6 == 0){colum = 2;}
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0042             if(PIND.7 == 0){colum = 3;}
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0043 
; 0000 0044             if(colum != -1){
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0045                 //position = row * 4 + colum;
; 0000 0046                 //lcd_putchar(layout[position]);
; 0000 0047                 //lcd_putchar(array[row][colum]);
; 0000 0048 
; 0000 0049 
; 0000 004A                 while(PIND.4 == 0){};
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 004B                 while(PIND.5 == 0){};
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004C                 while(PIND.6 == 0){};
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004D                 while(PIND.7 == 0){};
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 004E                 return array[row][colum];
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 004F 
; 0000 0050                 delay_ms(50);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0051 
; 0000 0052             }
; 0000 0053 
; 0000 0054 
; 0000 0055         }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0056 
; 0000 0057 
; 0000 0058 
; 0000 0059 
; 0000 005A 
; 0000 005B 
; 0000 005C 
; 0000 005D 
; 0000 005E }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
