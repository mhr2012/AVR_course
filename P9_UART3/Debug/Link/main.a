;
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;// function definitions
;void usart_init(void);
;
;void usart_init(void)
; 0000 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000B  // USART initialization
; 0000 000C  // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 000D  // USART Receiver: Off
; 0000 000E  // USART Transmitter: On
; 0000 000F  // USART Mode: Asynchronous
; 0000 0010  // USART Baud Rate: 9600
; 0000 0011  //UCSRA = 0;
; 0000 0012 
; 0000 0013  UCSRB = (1 << TXEN) | (1<<RXEN) | (0<<UDRIE) | (0<<TXCIE) | (0 << UCSZ2) | (0 << RXB8) | (0 << TXB8);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0014  UCSRC  = (0 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0015  UBRRH = 0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0016  UBRRL = 0x33;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0017 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;
;void main(void)
; 0000 001B {
;PCODE: $00000019 VOL: 0
; 0000 001C int a = 0;
; 0000 001D 
; 0000 001E usart_init();
;	a -> R16,R17
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001F 
; 0000 0020 while (1)
;PCODE: $0000001D VOL: 0
; 0000 0021     {
; 0000 0022 
; 0000 0023 
; 0000 0024 
; 0000 0025        printf("AVR: %d " ,a);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0026        delay_ms(1000);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0027        a = a+ 1; // a+=1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0028 
; 0000 0029 
; 0000 002A 
; 0000 002B 
; 0000 002C 
; 0000 002D    }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002E 
; 0000 002F }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
