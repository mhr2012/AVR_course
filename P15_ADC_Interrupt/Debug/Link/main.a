;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;
;#include <delay.h>
;#include <alcd.h>
;#include <delay.h>
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;unsigned int adc_data;
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000F // Read the AD conversion result
; 0000 0010 adc_data=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0011 // Place your code here
; 0000 0012 
; 0000 0013 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;void main(void)
; 0000 0016 {
;PCODE: $00000014 VOL: 0
; 0000 0017 
; 0000 0018 char buff[32];
; 0000 0019 lcd_init(16);
;PCODE: $00000015 VOL: 0
;	buff -> Y+0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001A 
; 0000 001B 
; 0000 001C // ADC initialization
; 0000 001D // ADC Clock frequency: 62/500 kHz
; 0000 001E // ADC Voltage Reference: AREF pin
; 0000 001F // ADC Auto Trigger Source: ADC Stopped
; 0000 0020 ADMUX=ADC_VREF_TYPE ;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0021 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0022 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0023 
; 0000 0024 
; 0000 0025 // Global enable interrupts
; 0000 0026 #asm("sei")
;PCODE: $0000001E VOL: 0
	sei
;PCODE: $0000001F VOL: 0
; 0000 0027 
; 0000 0028 while (1)
;PCODE: $00000020 VOL: 0
; 0000 0029       {
; 0000 002A 
; 0000 002B         sprintf(buff,"ADC:%2.2f",(float)adc_data);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002C         lcd_puts(buff);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002D         lcd_gotoxy(0,0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002E 
; 0000 002F 
; 0000 0030 
; 0000 0031       }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0032 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;
;
