;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#define Ref_Voltage (0<<REFS1) | (1<<REFS0)
;
;
;unsigned int Read_ADC(char ADC_CH);
;
;
;
;
;
;void main(void)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 000E unsigned int ADC_Level = 0;
; 0000 000F DDRC = 0xFF;
;	ADC_Level -> R16,R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0010 DDRD = 0xFF;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0011 PORTC = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0012 PORTD = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0013 
; 0000 0014  // ADC initialization
; 0000 0015  ADMUX = (0 << REFS1) |(1 << REFS0) | (0<<MUX4) |(0<<MUX3) | (0<<MUX2) |(0<<MUX1) |(0<<MUX0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0016  ADCSRA = (1 << ADEN) | (1 << ADIF) | (1 << ADPS2) |(1 << ADPS1) | (1 << ADPS0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0017  while (1)
;PCODE: $0000001C VOL: 0
; 0000 0018  {
; 0000 0019 
; 0000 001A     ADC_Level = Read_ADC(0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001B     PORTC = ADC_Level;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001C     PORTD = ADC_Level>>8;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001D 
; 0000 001E  }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001F }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;unsigned int Read_ADC(unsigned char ADC_CH){
; 0000 0021 unsigned int Read_ADC(unsigned char ADC_CH){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0022 
; 0000 0023     ADMUX |= (0xff & Ref_Voltage) |  ADC_CH;
;PCODE: $0000002C VOL: 0
;	ADC_CH -> Y+0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0024     delay_us(15);
;PCODE: $00000033 VOL: 0
; 0000 0025     ADCSR |= 0x40;//(1<<ADSC)start conversion
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0026     while((ADCSRA & 0x10) == 0); // wait for complite conversion
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0027     ADCSRA |= 0x10; //clear complite conversion flag for
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0028     return ADCW;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0029 
; 0000 002A 
; 0000 002B }
;PCODE: $00000041 VOL: 0
;
